
import Jama.Matrix;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jessa
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    ArrayList<Point> points;

    Sequence row;
    Sequence col;
    int max;
    double[][] score;

    public UI() {
        initComponents();
        initialize();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        input_ta = new javax.swing.JTextArea();
        reset_but = new javax.swing.JButton();
        upload_but = new javax.swing.JButton();
        submit_but = new javax.swing.JButton();
        nuc_rbut = new javax.swing.JRadioButton();
        prot_rbut = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        match_tf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        mismatch_tf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        gap_tf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        matrix_cbo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pairwise Sequence Alignment by J,Cabigas");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Input Space", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12))); // NOI18N

        input_ta.setColumns(20);
        input_ta.setRows(5);
        jScrollPane2.setViewportView(input_ta);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addContainerGap())
        );

        reset_but.setText("Reset");
        reset_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_butActionPerformed(evt);
            }
        });

        upload_but.setText("Upload Fasta");
        upload_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upload_butActionPerformed(evt);
            }
        });

        submit_but.setText("Submit");
        submit_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit_butActionPerformed(evt);
            }
        });

        nuc_rbut.setText("Nucleotide Sequence");
        nuc_rbut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuc_rbutActionPerformed(evt);
            }
        });

        prot_rbut.setText("Protein Sequence");
        prot_rbut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prot_rbutActionPerformed(evt);
            }
        });

        jLabel2.setText("Scoring Scheme:");

        jLabel3.setText("Match:");

        match_tf.setText("5");
        match_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                match_tfActionPerformed(evt);
            }
        });

        jLabel4.setText("Mismatch:");

        mismatch_tf.setText("-3");
        mismatch_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mismatch_tfActionPerformed(evt);
            }
        });

        jLabel5.setText("Gap:");

        gap_tf.setText("-4");
        gap_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gap_tfActionPerformed(evt);
            }
        });

        jLabel6.setText("Scoring Matrix:");

        matrix_cbo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PAM120(Global)" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(85, 85, 85))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(mismatch_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(match_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(gap_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(145, 145, 145)
                                .addComponent(matrix_cbo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(nuc_rbut)
                                .addGap(91, 91, 91)
                                .addComponent(prot_rbut)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(reset_but, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(upload_but, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(submit_but, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(21, 21, 21))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reset_but)
                    .addComponent(upload_but)
                    .addComponent(submit_but))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuc_rbut)
                    .addComponent(prot_rbut))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matrix_cbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(match_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(mismatch_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(gap_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reset_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_butActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reset_butActionPerformed

    private void match_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_match_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_match_tfActionPerformed

    private void mismatch_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mismatch_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mismatch_tfActionPerformed

    private void gap_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gap_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gap_tfActionPerformed

    private void submit_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submit_butActionPerformed
        String[] text = input_ta.getText().split("\n");
        ArrayList<Sequence> seq = new ArrayList<>();
        boolean valid = true;
        int k = 0;
        for (int i = 0; i < text.length; i++) {
            if (text[i].startsWith(">")) {
                k++;
                String comment = text[i].substring(1);
                String sequence = "";
                for (int j = i + 1; j < text.length; j++, i = j) {
                    if (text[j].isEmpty() || text[j].startsWith(">")) {
                        break;
                    }
                    sequence += text[j];
                }
                seq.add(new Sequence(comment, sequence));
                if (sequence.isEmpty()) {
                    i++;
                }
            } else if (!text[i].isEmpty()) {
                String comment = null;
                String sequence = "";
                for (int j = i; j < text.length; j++, i = j) {
                    if (text[j].isEmpty() || text[j].startsWith(">")) {
                        break;
                    }
                    sequence += text[j];
                }
                seq.add(new Sequence(comment, sequence));
                if (sequence.isEmpty()) {
                    i++;
                }
            } else {
                i++;
            }
        }

        for (int i = 0; i < seq.size(); i++) {
            Sequence tmp = seq.get(i);
            if (tmp.title == null) {
                JOptionPane.showMessageDialog(null, tmp.getID() + ": Input is not in FASTA format.");
                valid = false;

            } else if (tmp.title != null && tmp.sequence.isEmpty()) {
                JOptionPane.showMessageDialog(null, tmp.getID() + ": Input is not in FASTA format.");
                valid = false;

            }
        }

        if (k == 2 && valid) {
            preprocess(seq);
        } else {
            JOptionPane.showMessageDialog(null, "Input invalid: Enter 2 valid sequences.");
        }

    }//GEN-LAST:event_submit_butActionPerformed

    private void nuc_rbutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuc_rbutActionPerformed
        if (prot_rbut.isSelected()) {
            prot_rbut.setSelected(false);
            submit_but.enable();
        }

    }//GEN-LAST:event_nuc_rbutActionPerformed

    private void prot_rbutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prot_rbutActionPerformed
        if (nuc_rbut.isSelected()) {
            nuc_rbut.setSelected(false);
            submit_but.enable();
        }

    }//GEN-LAST:event_prot_rbutActionPerformed

    private void upload_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upload_butActionPerformed
        String filename = "";
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println(selectedFile.getName());
            filename = selectedFile.getName();
        }
        String line, input = "";

        try {
            BufferedReader reader = new BufferedReader(new FileReader(filename));

            while ((line = reader.readLine()) != null) {

                input += line;
                input += "\n";
            }
        } catch (FileNotFoundException ex) {

        } catch (IOException ex) {

        }
        input_ta.setText(input);

    }//GEN-LAST:event_upload_butActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JTextField gap_tf;
    private javax.swing.JTextArea input_ta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField match_tf;
    private javax.swing.JComboBox<String> matrix_cbo;
    private javax.swing.JTextField mismatch_tf;
    private javax.swing.JRadioButton nuc_rbut;
    private javax.swing.JRadioButton prot_rbut;
    private javax.swing.JButton reset_but;
    private javax.swing.JButton submit_but;
    private javax.swing.JButton upload_but;
    // End of variables declaration//GEN-END:variables

    private void initialize() {

        if (!nuc_rbut.isSelected() && !prot_rbut.isSelected()) {
            submit_but.disable();
        }
        points = new ArrayList<Point>();

    }

    private void preprocess(ArrayList<Sequence> seq) {
        Sequence seq1 = seq.get(0);
        Sequence seq2 = seq.get(1);

        seq1.sequence = "-" + seq1.sequence;
        seq2.sequence = "-" + seq2.sequence;

        //longest sequence will be the row
        if (seq1.sequence.length() > seq2.sequence.length()) {
            col = seq1;
            row = seq2;
        } else {
            row = seq1;
            col = seq2;
        }

        int x = 0;

        score = new double[row.sequence.length()][col.sequence.length()];

        for (int i = 0; i < row.sequence.length(); i++) {
            for (int j = 0; j < col.sequence.length(); j++) {
                points.add(new Point(i, j, 0.0));
                score[i][j] = 0.0;
            }
        }

        //initalization of tables
        for (int i = 1; i < col.sequence.length(); i++) {
            x += Integer.parseInt(gap_tf.getText());
            if (i < row.sequence.length()) {
                score[i][0] = x;
                Point tmp = getPoint(i, 0);
                tmp.setValue(x);

            }
            score[0][i] = x;
            Point tmp = getPoint(0, i);
            tmp.setValue(x);
        }
        scoring();
//        displayPoints();
        tracing();

    }

    private void displayPoints() {

        for (int i = 0; i < points.size(); i++) {
            Point tmp = points.get(i);
            System.out.println(tmp.getX() + ", " + tmp.getY() + ": " + tmp.getValue());
        }
    }

    private Point getPoint(int x, int y) {
        Point tmp = null;
        for (int i = 0; i < points.size(); i++) {
            tmp = points.get(i);
            if (tmp.getX() == x && tmp.getY() == y) {
                break;
            }
        }
        return tmp;
    }

    private void scoring() {
        int match = Integer.parseInt(match_tf.getText());
        int mismatch = Integer.parseInt(mismatch_tf.getText());
        int gap = Integer.parseInt(gap_tf.getText());
        char a, b = '-';
        int cellValue = 0;

        for (int i = 1; i < row.sequence.length(); i++) {
            cellValue = 0;
            for (int j = 1; j < col.sequence.length(); j++) {
                Point cur = getPoint(i, j);

//                System.out.println(cur.getX() + " " + cur.getY());
                a = col.sequence.charAt(j);
                b = row.sequence.charAt(i);

                if (a == b) {
                    cellValue = match;
                } else {
                    cellValue = mismatch;
                }

                //diagonal
                double diagValue = getDiagonal(i, j);
                diagValue += cellValue;

                //left
                double leftValue = getLeft(i, j) + Integer.parseInt(gap_tf.getText());

                //top
                double topValue = getTop(i, j) + Integer.parseInt(gap_tf.getText());
                double tmp = 0;
                if (leftValue > topValue) {
                    if (leftValue > diagValue) {
                        tmp = leftValue;
                        cur.addOrigin(getPoint(i, j - 1));
                    } else if (leftValue == diagValue) {
                        cur.addOrigin(getPoint(i, j - 1));
                        cur.addOrigin(getPoint(i - 1, j - 1));
                        tmp = leftValue;
                    } else {
                        cur.addOrigin(getPoint(i - 1, j - 1));
                        tmp = diagValue;
                    }
                } else if (topValue > leftValue) {
                    if (topValue > diagValue) {
                        tmp = topValue;
                        cur.addOrigin(getPoint(i - 1, j));
                    } else if (topValue == diagValue) {
                        cur.addOrigin(getPoint(i - 1, j));
                        cur.addOrigin(getPoint(i - 1, j - 1));
                        tmp = topValue;
                    } else {
                        cur.addOrigin(getPoint(i - 1, j - 1));
                        tmp = diagValue;
                    }
                } else if (diagValue > topValue) {
                    if (diagValue > leftValue) {
                        tmp = diagValue;
                        cur.addOrigin(getPoint(i - 1, j - 1));
                    } else if (diagValue == leftValue) {
                        cur.addOrigin(getPoint(i - 1, j - 1));
                        cur.addOrigin(getPoint(i, j - 1));
                        tmp = diagValue;
                    } else {
                        cur.addOrigin(getPoint(i, j - 1));
                        tmp = leftValue;
                    }
                }

                score[i][j] = tmp;
                cur.setValue(tmp);

                Matrix m = new Matrix(score);
//                System.out.println(j + " " + i + ": " + a + " " + b);
//                System.out.println(leftValue + " + " + diagValue + " + " + topValue + " = " + tmp);

                m.print(4, 3);

                System.out.println(cur.getValue()+ " origins");
                for (int k = 0; k < cur.getOrigins().size(); k++) {
                    System.out.println(cur.getOrigins().get(k).getValue());
                }
                System.out.println("");
            }
        }

    }

    private double getLeft(int i, int j) {

        return score[i][j - 1];
    }

    private double getDiagonal(int i, int j) {
        return score[i - 1][j - 1];
    }

    private double getTop(int i, int j) {
        return score[i - 1][j];
    }

    private void tracing() {
        ArrayList<Point> backtrack = new ArrayList<>();
        Point cur = getPoint(row.sequence.length(), col.sequence.length());
        System.out.println(cur.x + " " + cur.y);
        int i = cur.x, j = cur.y;
        
        while (i != 0 && j != 0) {
            cur = getPoint(i, j);
            backtrack.add(cur);
            
            if (cur.getOrigins().size() == 1) {
                i = cur.getOrigins().get(0).x;
                j = cur.getOrigins().get(0).y;
            } else {
                System.out.println("There are more than 1 possibility of the traceback.");
                for (int k = 0; k < cur.getOrigins().size(); k++) {
                    Point t = cur.getOrigins().get(k);
                    System.out.println(t.x + ", " + t.y);
                }
                System.out.print("Enter cell[i]: ");
                Scanner scan = new Scanner(System.in);
                i = scan.nextInt();
                System.out.print("Enter cell[j]: ");
                j = scan.nextInt();
                
            }
           
        }

        for (int k = 0; k < backtrack.size(); k++) {
            System.out.print(backtrack.get(k).getValue()+"-->");
        }
    }

}

class Sequence {

    public String sequence;
    public String title;

    Sequence(String title, String sequence) {
        this.title = title;
        this.sequence = sequence.toUpperCase();

    }

    public String getID() {
        try {
            return this.title.split("\\|")[1];
        } catch (Exception e) {
            return this.title;
        }
    }
}

class Point {

    int x;
    int y;
    private double value;
    private ArrayList<Point> origins = new ArrayList<Point>();

    Point(int x, int y, double value) {
        this.x = x;
        this.y = y;
        this.value = value;
    }

    public void addOrigin(Point origin) {
        getOrigins().add(origin);
    }

    /**
     * @return the x
     */
    public int getX() {
        return x;
    }

    /**
     * @param x the x to set
     */
    public void setX(int x) {
        this.x = x;
    }

    /**
     * @return the y
     */
    public int getY() {
        return y;
    }

    /**
     * @param y the y to set
     */
    public void setY(int y) {
        this.y = y;
    }

    /**
     * @return the value
     */
    public double getValue() {
        return value;
    }

    /**
     * @param value the value to set
     */
    public void setValue(double value) {
        this.value = value;
    }

    /**
     * @return the origins
     */
    public ArrayList<Point> getOrigins() {
        return origins;
    }

    /**
     * @param origins the origins to set
     */
    public void setOrigins(ArrayList<Point> origins) {
        this.origins = origins;
    }
}
