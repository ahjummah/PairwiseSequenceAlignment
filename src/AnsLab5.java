
import Jama.Matrix;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jessa
 */
public class AnsLab5 extends javax.swing.JFrame {

    /**
     * Creates new form AnsLab5
     */
    Sequence row;
    Sequence col;
    double[][] score;
    ArrayList<Point> points;
    private final Map<Character, double[]> PAM_ScoreMatrix;
    private String Proteins;

    public AnsLab5() {
        initComponents();

        PAM_ScoreMatrix = new HashMap<>();
        Proteins = "";
        points = new ArrayList<Point>();

        initPAM120ScoringMatrixMap();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        input_ta = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        reset = new javax.swing.JButton();
        upload = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        processNuc = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        match = new javax.swing.JTextField();
        mismatch = new javax.swing.JTextField();
        gap = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        processProt = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        matrix = new javax.swing.JComboBox<>();

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Input Space", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12))); // NOI18N

        input_ta.setColumns(20);
        input_ta.setRows(5);
        jScrollPane2.setViewportView(input_ta);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pairwise Sequence Alignment by J,Cabigas");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Input Space", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12))); // NOI18N

        input.setColumns(20);
        input.setRows(5);
        input.setText("> seq1\nCGTGAATTCAT\n\n>seq2\nGACTTAC");
        jScrollPane3.setViewportView(input);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Pairwise Sequence Alignment by J,Cabigas");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Configurations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12))); // NOI18N

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        upload.setText("Upload Fasta");
        upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setForeground(new java.awt.Color(204, 204, 204));

        processNuc.setText("Nucleotide Sequence");
        processNuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processNucActionPerformed(evt);
            }
        });

        jLabel3.setText("Scoring Scheme:");

        jLabel4.setText("Match:");

        jLabel5.setText("Mismatch:");

        jLabel6.setText("Gap:");

        match.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        match.setText("1");

        mismatch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        mismatch.setText("-1");

        gap.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gap.setText("-1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(match, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mismatch, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(processNuc)
                        .addComponent(jLabel3)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processNuc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(match, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mismatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(gap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setForeground(new java.awt.Color(204, 204, 204));

        processProt.setText("Protein Sequence");
        processProt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processProtActionPerformed(evt);
            }
        });

        jLabel8.setText("Scoring Matrix:");

        matrix.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PAM120(Global)", "BLOSUM62(Local)" }));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(processProt))
                    .addComponent(jLabel8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(matrix, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processProt)
                .addGap(12, 12, 12)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matrix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(upload, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reset)
                    .addComponent(upload)
                    .addComponent(submit))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed

        input.setText("");
        match.setText("1");
        mismatch.setText("0");
        gap.setText("-1");
        matrix.setSelectedIndex(0);

    }//GEN-LAST:event_resetActionPerformed

    private void uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadActionPerformed
        String filename = "";
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            //            System.out.println(selectedFile.getName());
            filename = selectedFile.getName();
        }
        String line, inputText = "";

        try {
            BufferedReader reader = new BufferedReader(new FileReader(filename));

            while ((line = reader.readLine()) != null) {

                inputText += line;
                inputText += "\n";
            }
        } catch (FileNotFoundException ex) {

        } catch (IOException ex) {

        }
        input.setText(inputText);
    }//GEN-LAST:event_uploadActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        System.out.println("Match Value: " + match.getText());
        System.out.println("Mismatch Value: " + mismatch.getText());
        System.out.println("Gap Value: " + gap.getText());
        System.out.println("");
        if (!processNuc.isSelected() && !processProt.isSelected()) {
            JOptionPane.showMessageDialog(null, "No selected sequence type.");
        } else {
            preprocessData(input.getText());
            traceBack();
        }
    }//GEN-LAST:event_submitActionPerformed

    private void preprocessData(String inputText) {

        String[] text = input.getText().split("\n");
        ArrayList<Sequence> seq = new ArrayList<>();
        boolean valid = true;
        int choice = 0;

        int k = 0;
        for (int i = 0; i < text.length; i++) {

            if (text[i].startsWith(">")) {  //start of a new sequence
                k++;
                String comment = text[i].substring(1);
                String sequence = "";
                for (int j = i + 1; j < text.length; j++, i = j) {
                    if (text[j].isEmpty() || text[j].startsWith(">")) {
                        break;
                    }
                    sequence += text[j];
                }
                seq.add(new Sequence(comment, sequence));
                if (sequence.isEmpty()) {
                    i++;
                }

            } else if (!text[i].isEmpty()) { //sequence of nucleotide or proteins
                String comment = null;
                String sequence = "";
                for (int j = i; j < text.length; j++, i = j) {
                    if (text[j].isEmpty() || text[j].startsWith(">")) { //handles start of a new sequence 
                        break;
                    }
                    sequence += text[j];
                }
                seq.add(new Sequence(comment, sequence));
                if (sequence.isEmpty()) {
                    i++;
                }
            } else {
                i++;
            }
        }

        for (int i = 0; i < seq.size(); i++) {
            Sequence tmp = seq.get(i);
            if (tmp.title == null) {
                /*
                handles:
                ACGT
                Meaning: Sequence doesnt start with a > [sequence title]
                 */
                JOptionPane.showMessageDialog(null, tmp.getID() + ": Input is not in FASTA format.");
                valid = false;

            } else if (tmp.title != null && tmp.sequence.isEmpty()) {
                /*
                handles:
                >seq1
                >seq2
                 */
                JOptionPane.showMessageDialog(null, tmp.getID() + ": Input is not in FASTA format.");
                valid = false;
            }
        }

        if (processNuc.isSelected()) {
            choice = 1;
        } else if (processNuc.isSelected()) {
            choice = 2;
        }

        if (k == 2 && valid) {

            //initialize values according to sequence type
            initValues(choice, seq);
            if (choice == 1) {
                scoringNucleotide();
            } else {
                ProcessProteinSequence(seq);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Input invalid: Enter 2 valid sequences.");
        }

    }

    private void initValues(int choice, ArrayList<Sequence> seq) {
        Sequence seq1 = seq.get(0);
        Sequence seq2 = seq.get(1);

        seq1.sequence = "-" + seq1.sequence;
        seq2.sequence = "-" + seq2.sequence;

        //longest sequence will be the col
        if (seq1.sequence.length() > seq2.sequence.length()) {
            col = seq1;
            row = seq2;
        } else {
            col = seq2;
            row = seq1;
        }

        initializeMatrix();

        double x = 0;
        int gapScore;
        if (choice == 1) {
            gapScore = Integer.parseInt(gap.getText());
        } else {//get the gap score of the chosen scoring matrix
            gapScore = 0;
            if (matrix.getSelectedIndex() == 0) {
                gapScore = -8;
            }
        }
        for (int i = 1; i < col.sequence.length(); i++) {
            x = i * gapScore;
            if (i < row.sequence.length()) {
                score[i][0] = x;
                Point tmp = getPoint(i, 0);
                tmp.setValue(x);

            }
            score[0][i] = x;
            Point tmp = getPoint(0, i);
            tmp.setValue(x);
        }
    }

    private Point getPoint(int x, int y) {
        Point tmp = null;
        for (int i = 0; i < points.size(); i++) {
            tmp = points.get(i);
            if (tmp.getX() == x && tmp.getY() == y) {
                break;
            }
        }
        return tmp;
    }

    private void scoringNucleotide() {

        int m = Integer.parseInt(match.getText());
        int mm = Integer.parseInt(mismatch.getText());
        int gp = Integer.parseInt(gap.getText());

        for (int i = 1; i < row.sequence.length(); i++) {
            for (int j = 1; j < col.sequence.length(); j++) {
                Point cur = getPoint(i, j);
                double left = score[i][j - 1] + gp;
                double top = score[i - 1][j] + gp;
                double diag = score[i - 1][j - 1];

                if (row.sequence.charAt(i) == col.sequence.charAt(j)) {
                    diag += m;
                } else {
                    diag += mm;
                }
                score[i][j] = Math.max(left, Math.max(top, diag));
                if (score[i][j] == left) {
                    cur.addOrigin(getPoint(i, j - 1));
                }
                if (score[i][j] == top) {
                    cur.addOrigin(getPoint(i - 1, j));
                }
                if (score[i][j] == diag) {
                    cur.addOrigin(getPoint(i - 1, j - 1));
                }
                cur.setValue(score[i][j]);
            }
        }
        Matrix d = new Matrix(score);
        d.print(6, 2);
    }

    private void processNucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processNucActionPerformed
        if (processProt.isSelected()) {
            processProt.setSelected(false);
            submit.enable();
        }
    }//GEN-LAST:event_processNucActionPerformed

    private void processProtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processProtActionPerformed
        if (processNuc.isSelected()) {
            processNuc.setSelected(false);
            submit.enable();
        }
    }//GEN-LAST:event_processProtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnsLab5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnsLab5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnsLab5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnsLab5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnsLab5().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField gap;
    private javax.swing.JTextArea input;
    private javax.swing.JTextArea input_ta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField match;
    private javax.swing.JComboBox<String> matrix;
    private javax.swing.JTextField mismatch;
    private javax.swing.JRadioButton processNuc;
    private javax.swing.JRadioButton processProt;
    private javax.swing.JButton reset;
    private javax.swing.JButton submit;
    private javax.swing.JButton upload;
    // End of variables declaration//GEN-END:variables

    private void ProcessProteinSequence(ArrayList<Sequence> seq) {
    }

    private void initPAM120ScoringMatrixMap() {
        PAM_ScoreMatrix.put('A', new double[]{3, -3, -1, 0, -3, -1, 0, 1, -3, -1, -3, -2, -2, -4, 1, 1, 1, -7, -4, 0, 0, -1, -1, -8});
        PAM_ScoreMatrix.put('R', new double[]{-3, 6, -1, -3, -4, 1, -3, -4, 1, -2, -4, 2, -1, -5, -1, -1, -2, 1, -5, -3, -2, -1, -2, -8});
        PAM_ScoreMatrix.put('N', new double[]{-1, -1, 4, 2, -5, 0, 1, 0, 2, -2, -4, 1, -3, -4, -2, 1, 0, -4, -2, -3, 3, 0, -1, -8});
        PAM_ScoreMatrix.put('D', new double[]{0, -3, 2, 5, -7, 1, 3, 0, 0, -3, -5, -1, -4, -7, -3, 0, -1, -8, -5, -3, 4, 3, -2, -8});
        PAM_ScoreMatrix.put('C', new double[]{-3, -4, -5, -7, 9, -7, -7, -4, -4, -3, -7, -7, -6, -6, -4, 0, -3, -8, -1, -3, -6, -7, -4, -8});
        PAM_ScoreMatrix.put('Q', new double[]{-1, 1, 0, 1, -7, 6, 2, -3, 3, -3, -2, 0, -1, -6, 0, -2, -2, -6, -5, -3, 0, 4, -1, -8});
        PAM_ScoreMatrix.put('E', new double[]{0, -3, 1, 3, -7, 2, 5, -1, -1, -3, -4, -1, -3, -7, -2, -1, -2, -8, -5, -3, 3, 4, -1, -8});
        PAM_ScoreMatrix.put('G', new double[]{1, -4, 0, 0, -4, -3, -1, 5, -4, -4, -5, -3, -4, -5, -2, 1, -1, -8, -6, -2, 0, -2, -2, -8});
        PAM_ScoreMatrix.put('H', new double[]{-3, 1, 2, 0, -4, 3, -1, -4, 7, -4, -3, -2, -4, -3, -1, -2, -3, -3, -1, -3, 1, 1, -2, -8});
        PAM_ScoreMatrix.put('I', new double[]{-1, -2, -2, -3, -3, -3, -3, -4, -4, 6, 1, -3, 1, 0, -3, -2, 0, -6, -2, 3, -3, -3, -1, -8});
        PAM_ScoreMatrix.put('L', new double[]{-3, -4, -4, -5, -7, -2, -4, -5, -3, 1, 5, -4, 3, 0, -3, -4, -3, -3, -2, 1, -4, -3, -2, -8});
        PAM_ScoreMatrix.put('K', new double[]{-2, 2, 1, -1, -7, 0, -1, -3, -2, -3, -4, 5, 0, -7, -2, -1, -1, -5, -5, -4, 0, -1, -2, -8});
        PAM_ScoreMatrix.put('M', new double[]{-2, -1, -3, -4, -6, -1, -3, -4, -4, 1, 3, 0, 8, -1, -3, -2, -1, -6, -4, 1, -4, -2, -2, -8});
        PAM_ScoreMatrix.put('F', new double[]{-4, -5, -4, -7, -6, -6, -7, -5, -3, 0, 0, -7, -1, 8, -5, -3, -4, -1, 4, -3, -5, -6, -3, -8});
        PAM_ScoreMatrix.put('P', new double[]{1, -1, -2, -3, -4, 0, -2, -2, -1, -3, -3, -2, -3, -5, 6, 1, -1, -7, -6, -2, -2, -1, -2, -8});
        PAM_ScoreMatrix.put('S', new double[]{1, - 1, 1, 0, 0, -2, -1, 1, -2, -2, -4, -1, -2, -3, 1, 3, 2, -2, -3, -2, 0, -1, -1, -8});
        PAM_ScoreMatrix.put('T', new double[]{1, -2, 0, -1, -3, -2, -2, -1, -3, 0, -3, -1, -1, -4, -1, 2, 4, -6, -3, 0, 0, -2, -1, -8});
        PAM_ScoreMatrix.put('W', new double[]{-7, 1, -4, -8, -8, -6, -8, -8, -3, -6, -3, -5, -6, -1, -7, -2, -6, 12, -2, -8, -6, -7, -5, -8});
        PAM_ScoreMatrix.put('Y', new double[]{-4, -5, -2, -5, -1, -5, -5, -6, -1, -2, -2, -5, -4, 4, -6, -3, -3, -2, 8, -3, -3, -5, -3, -8});
        PAM_ScoreMatrix.put('V', new double[]{0, -3, -3, -3, -3, -3, -3, -2, -3, 3, 1, -4, 1, -3, -2, -2, 0, -8, -3, 5, -3, -3, -1, -8});
        PAM_ScoreMatrix.put('B', new double[]{0, -2, 3, 4, -6, 0, 3, 0, 1, -3, -4, 0, -4, -5, -2, 0, 0, -6, -3, -3, 4, 2, -1, -8});
        PAM_ScoreMatrix.put('Z', new double[]{-1, -1, 0, 3, -7, 4, 4, -2, 1, -3, -3, -1, -2, -6, -1, -1, -2, -7, -5, -3, 2, 4, -1, -8});
        PAM_ScoreMatrix.put('X', new double[]{-1, -2, -1, -2, -4, -1, -1, -2, -2, -1, -2, -2, -2, -3, -2, -1, -1, -5, -3, -1, -1, -1, -2, -8});
        PAM_ScoreMatrix.put('-', new double[]{-8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, 1});
        Proteins = "ARNDCQEGHILKMFPSTWYVBZX-";

    }

    private void initializeMatrix() {
        score = new double[row.sequence.length()][col.sequence.length()];
        for (int i = 0; i < row.sequence.length(); i++) {
            for (int j = 0; j < col.sequence.length(); j++) {
                points.add(new Point(i, j, 0.0));
                score[i][j] = 0.0;
            }
        }
    }

    private void traceBack() {
        ArrayList<Point> backtrack = new ArrayList<>();
        Point cur = getPoint(row.sequence.length(), col.sequence.length());
        ArrayList<String> seq1 = new ArrayList<>();
        ArrayList<String> seq2 = new ArrayList<>();
        while (!cur.getOrigins().isEmpty()) {
            backtrack.add(cur);

            if (cur.getOrigins().size() > 1) {
                char[] origin = new char[cur.getOrigins().size()];
            } else {
                cur = cur.getOrigins().get(0);
            }
        }

    }

}
